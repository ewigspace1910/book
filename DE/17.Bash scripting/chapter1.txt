1. Introduction and refresher
Welcome to this course on Bash scripting. I am Alex, a data scientist from Sydney Australia.

2. Introduction to the course
In this course we will cover; Moving from one-at-a-time commands in a terminal to full scripts. Creating and using variables and various data types in Bash scripts. Controlling your scripts using tools such as if-statements and for-loops. and writing functions and learning to schedule scripts with cron.

3. Why Bash scripting? (Bash)
Let's first review what Bash is and why it matters. Bash stands for bourne again shell and is a pun on it being a replacement for the bourne shell. It is old (developed in the 80's) but is a very popular shell and often the default for unix and mac computer systems. Unix systems are the backbone of the internet and servers and so important for running large ML models and for data pipelines and architectures. All major cloud companies have command-line interfaces to their products.

4. Why Bash scripting? (scripting!)
So why Bash scripting? Rather than copy-pasting your Bash commands one-by-one you can save and execute your program with a single command. You also have easy access to powerful programming constructs mentioned on earlier slides.

5. Expected knowledge
This course will expect you to have certain knowledge such as: Understanding the shell or command-line. You should have used basic commands such as cat, grep, sed and others before. If you are rusty, don't worry - let's revise now!

6. Shell commands refresher
Here are some important shell commands. This is not exhaustive, but a brief reminder. grep or egrep filters your input, perhaps from another program or command using regex pattern matching. cat opens up file contents to be used line-by-line. Perhaps viewed or piped onwards. tail and head give you the first or last lines using the n flag. wc does a word or line count depending on using the flag w or l. and sed does a string replacement using regex pattern-matching.

7. A reminder of REGEX
A few times already we have mentioned pattern matching. Regex, which is an abbreviation of regular expressions are therefore very useful in Bash scripting. There are a variety of uses for regex in Bash scripting and so it is important that you revise this skill and use sites such as regex101.com to test your expressions.

8. Some shell practice
Let's practice some of those basic shell commands with an example. Imagine that you had a text file called fruits.txt with the following 3 lines of data. Using the grep command with a letter to match on, we would get this return. That is, all the lines containing an a.

9. Some shell practice
If we changed the letter a for the letter p, then we would only match on apple. When doing matching, recall that square parentheses create a set and using the caret symbol inverses that, asking to match on anything but those. If we created a set with p and c and re-ran the match we would return anything with a p or c inside. That is, apple and carrot.

10. Some shell practice
In the command line you likely have used pipes to push the output of one command into the next. If we had a file with many lines, we may take advantaged of this by piping the file contents to sort and then uniq with the flag c The first command sorts the data alphabetically and the next line will do a distinct count. It is important to sort first, since uniq only considers adjacent for its distinct operation. If we wanted the top n fruits, we could use wc with the l flag and then head as follows.
---------------
Got It!
1. Your first Bash script
In this lesson, you will move beyond command line execution and create your first Bash script.

2. Bash script anatomy
There are several key parts to a Bash script. The first line has a shebang or hash-bang then the path to where Bash is. Most commonly that is slash usr slash bash. Bash could be in a different location so you can check where Bash is using the command 'which bash'. The middle of the script contains your code. It may be simple commands or more advanced code you will learn in this course.

3. Bash script anatomy
Once your script is written you can save it and run it. The file extension is usually dot s h. Though this is only convention if you have the first line with the she-bang and path to Bash mentioned before. You can run using the command Bash followed by the script name. If the first line in your script is the she-bang and path to Bash you can also simply run as dot slash and the script name.

4. Bash script example
Here is an example of a full script. It begins with the she-bang and path to Bash. There are a few simple lines of code. If you saved it as eg dot s h then you could run using dot slash e g dot s h. The output is produced here, each code line is run in turn.

5. Bash and shell commands
Each line of a Bash script can be a shell command. So, you can also use pipes to create a chain of terminal commands in the shell. Something you are perhaps already familiar with. Here is a text file called animals dot txt. It contains some animals and their grouping. We want to determine how many animals are in each group.

6. Bash and shell commands
You may be able to write a chain of commands piped into each other in the terminal. However, let's instead put this into a script. The script begins with the hash-bang as we know. Then instead of a simple echo command like the last example, we add in the command we would use. This command concatenates the text file, pipes that to the cut command which will split on spaces and take the second field (the animal group). The chain then sorts and does a unique count. You could try this in your own terminal to confirm it works there. Now instead of copying and pasting in that chain each time you can simply run Bash group dot sh. You will get the aggregates returned!
--------------
1. Standard streams & arguments
Let's learn more about inputs and outputs for your Bash scripts.

2. STDIN-STDOUT-STDERR
It is also useful to know about the three streams for Bash programs. Standard input is the stream of data going into the program. Standard output is the stream going out, and Standard error is where errors and exceptions in the program are written to. By default this isn't obvious as the streams tend to appear in the terminal. Though you may see scripts called with this bit of code at the end. This is redirecting the standard error to part of the UNIX system which deletes input. You could use the same using 1 to redirect stdout.

3. STDIN-STDOUT graphically
This graphical example represents what we just discussed conceptually. The standard output of the cat program, becomes the standard input for the cut program and so on until the pipe finishes which prints the last standard output to the terminal. This is the expected behaviour. Though if an error occurred at any time, the error would by default display in the terminal.

4. STDIN example
Consider this text file with three lines of data. With this text file, running the cat command as seen will take the data from the file and redirect the STDOUT (the file contents) to a new file called new sports dot txt. The 1 means standard output. You could cat the file created and see that indeed, the standard output of the first cat ended up in the new file.

5. STDIN vs ARGV
A key concept for Bash scripting is the use of arguments. Bash scripts take arguments specified when making the execution call of the script. ARGV is a term to describe all the arguments that are fed into the script. You can access the arguments using numerical dollar-sign notation. The first argument being dollar-one etc. Some other special arguments are dollar-at-symbol and dollar-star which return all the arguments together. Dollar-hash gives the number of arguments.

6. ARGV example
Let's make this conceptual idea concrete. Consider a script with the following code inside. We hope to print out the first then second arguments. Then all the arguments, then a phrase including how many arguments. Let's see how it goes.

7. Running the ARGV example
If we execute that script as noted here, the strings 'one two three four five' are all separate arguments. Indeed, our return will be as we expected. We print out the first, then second, then all the arguments and finally our phrase containing the number of arguments (which is 5).
Got It!
1. Projection: Getting only what you need
In this chapter, we're going to learn about getting only what you need, and fast. We'll start with what MongoDB calls "projection".

2. What is "projection"?
The term "projection" is about reducing multidimensional data. In cartography, it's about getting what you need to make a reasonable image from a 3D earth. You can also think about asking a certain part of your data to project its voice, to "speak up"! With a table of data, it's about selecting columns. With MongoDB, it's about selecting substructure.

3. Projection in MongoDB
In MongoDB, we fetch projections by specifying what document fields interest us. We can do this by passing a dictionary as a second argument to the "find" method of a collection. For each field that we want to include in the projection, we give a value of 1. Fields that we don't include in the dictionary are not included in the projection. The exception is a document's "_id" field. The "_id" field is always included in a projection by default. We must assign it the value 0 in the projection dictionary to leave it out. Here I try to collect the prize affiliation data for all laureates - my filter document is empty. What I get back is not the data itself, but a so-called cursor, an iterable that I can fetch documents from, one at a time.

4. Projection in MongoDB
In Python, we can collect from an iterable into a list. We do this by passing it to the "list" function. I don't want to print out hundreds of laureate documents. Thus, I also use slicing syntax to get only the first three elements of the resulting list. We can see that our projections contain only document data about prize affiliations. We also retained the structure of that data. Remember how to project fields this way: it’s going to be very useful in the rest of the course.

5. Missing fields
What happens when you try to project out fields that are not present in some documents? Rather than raise an error, MongoDB returns the documents without those fields. This expression projects the bornCountry field. This field isn't present for organization laureates, though. Only the firstName and id fields get returned. Notice that I formatted a projection as a list of fields. When a projection doesn't involve excluding fields, the pymongo driver accepts this format.

6. Missing fields
Also, it's okay if a projected field isn't in any of a collection's documents. Here, because there is no favoriteIceCreamFlavor field, the projection returns only object IDs.

7. Simple aggregation
We're going to learn about MongoDB's aggregation framework in the next chapter. But already we have a new tool to fetch less data, only what we need. For example, let's count the total number of prize medals awarded. That is, the total number of elements in prizes arrays across all laureates. We can iterate over a cursor of all laureates with only the prizes field projected out. In this way, we avoid having to download the other data in each laureate document. This can definitely affect performance for very large collections. We can even, in this case, use a comprehension to reduce memory overhead in Python. We can leverage Python's built-in tools for iterables and dictionaries. And we can use projection to slim down these dictionaries to contain only what we need for our analysis.
---------
2. Sorting post-query with Python
First, its useful to review how we can sort a list of retrieved documents with only Python. This may be plenty performant, especially for small datasets. After all, we can store a local cache of our data and try many different operations on it. Let's get a list of all physics prize documents, with the year field projected. I'm not interested in printing out the full projected documents with the document ids. So, I'll use a list comprehension to collect the year values, slice out the first five values, and print them. It looks like the documents are in reverse chronological order, but we get no guarantee of this. To sort the documents in ascending order of year, I use the built-in Python "sorted" function. I also import the "itemgetter" function from Python's standard library. Given a key, it fetches the value for that key in a dictionary. To sort in reverse - or descending - order, we can pass True as the "reverse" keyword argument to the "sorted" function.

3. Sorting in-query with MongoDB
We can also ask Mongo to do simple sorting by field values on the server and yield results in sorted order. Here, we pass a "sort" argument to the "find" method, giving a list of field-direction pairs. In this case, we want to sort on the "year" field, and in the ascending direction. I don't need the documents beyond the print statement, so I pass the cursor to the list comprehension. To sort by year in descending order, we use negative one as the second element of the sort pair. Why is a list passed to the sort keyword argument? This is because you can sort first by one field and then by others. Let's see how.

4. Primary and secondary sorting
Let's sort prize documents first by ascending year and then by descending category. To do this, we provide the corresponding pairs in order as a list. Here, we also query for prizes awarded between 1966 and 1970, exclusive. We project out only the data we need, the category and year values. Notice that we could sort by fields that we do not project - in this case, we happen to be also projecting the sort fields. For each projection yielded by the cursor, we format a string with the year and category value. To do this, we use Python's double-star dictionary unpacking syntax. The output shows years increasing and, for each year, categories decreasing. In both cases, the order is alphabetical because the fields are both string-valued. For the four-digit-year strings, sorting produces the same result as numerical sorting. We can see that there was no award for economics in 1967 or 1968, and there was no award for peace in 1967.

5. Sorting with pymongo versus MongoDB shell
One last thing: the command-line shell for MongoDB uses JavaScript. You specify a sort using the form of a JavaScript object, which looks like a Python dictionary. This works because JavaScript objects in the console keep their key order as entered. In Python 3-point-6 and below, though, there is no similar guarantee with dictionaries. The order of keys may not be preserved as entered. This is why pymongo requires a list of tuples.
---------

. What are indexes?
It's time to speed up our queries. Enter indexes.

2. What are indexes?
An index in MongoDB is like a book's index. Let's say I grab a textbook on materials science. I want information on eutectic temperatures. I could flip through the book. I could also try narrowing down to a chapter from skimming the table of contents.

3. What are indexes?
Instead, I go to the index in back. I see an alphabetical ordering of terms, with page numbers for each. I find "eutectic temperature", which directs me to page 314. I go there, and violà!

4. What are indexes?
With MongoDB, imagine each collection as a book, each document as a page, and each field as a type of content. Imagine an ordered index for temperatures. This means you can find all pages that list temperatures in a range of interest. This is hard to do with an actual book. But, MongoDB structures documents with fields. Thus, you can index fields using the values of those fields.

5. When to use indexes?
When are indexes useful? First, when you expect to get only one or a few documents back. If your typical queries fetch most if not all documents, you might as well scan the whole collection. Making Mongo maintain an index is a waste of time. Second, when you have very large documents or very large collections. Rather than load these into memory from disk, Mongo can use much-smaller indexes.

6. Gauging performance before indexing
How long does it take to collect prize documents using certain queries? Let's measure. I use here the "timeit" module of Python, via the Jupyter notebook's "timeit" magic. Fetching prizes from 1901 takes half a millisecond on my laptop. Fetching all prizes sorted by year takes over five milliseconds.

7. Adding a single-field index
Let's now create an ascending index on prize years using the create_index method. Mongo can read a single-field index in reverse. For a multi-field index, though, direction matters. After creating this index, query performance improves. The first query's runtime drops by 30%, the second by 20%. These gains surprise me - not because they are low, but because they are high! Our prizes collection is under a quarter megabyte uncompressed. It has fewer than a thousand documents. Imagine the performance gain on a much larger collection. Especially if the working set doesn't fit in RAM.

8. Adding a compound (multiple-field) index
Here we create a compound index on ascending category and then ascending year. Thus, Mongo maintains an index by ascending year for each category. Here we list all years of economics prizes. We involve only the category and year fields. Thus, Mongo never has to examine the collection itself to execute the query - the query is "covered" by the index. We see only a minor speedup, but indexes can take up far less space than their collections. Defining indexes that cover common queries can be huge for performance. Here is another query, fetching the first award year for the prize in economics. Once again, our compound index covers the query.

9. Learn more: ask your collection and your queries
Finally, I want to show you some tools to troubleshoot query performance. We won't cover these tools in the exercises. The first is the "index information" method. This helps confirm which indexes exist for a collection. The second tool is the "explain" method of a cursor. MongoDB provides output from its query plan detailing how a given query will execute. Filtering, projecting, sorting, and fetching all happen in stages. Here we see a full collection scan, or collscan, preceding projection. After creating an appropriate index, we see that an index scan, or ixscan, happens instead.
---------

1. Limits and Skips with Sorts, Oh My!
In this lesson we will learn about the limit and skip parameters of Mongo queries. They can help us inspect a few documents at a time and page through a collection. In concert with sorting, they can help us get documents with extreme values.

2. Limiting our exploration
Let's say I want to get prize category and year information for a few prizes split three ways. First, I check that for all prizes, either all laureates have a one-third share, or none have a one-third share. I verify my assumption with this for-loop of assertions. Now, I can print information on prizes split three ways. I filter for laureate share equal to three, and I get a long iterator: tens of lines fill my screen. Can I fetch only a few documents to examine before I decide how to proceed next in my analysis? Yes. Mongo provides a convenient limit option as an extra parameter to the find method. There we go.

3. Skips and paging through results
Besides limiting the number of results, we can also skip results server-side. When you use the "skip" parameter in conjunction with limits, you can get pagination, with the number of results per page set by the limit parameter.

4. Using cursor methods for {sort, skip, limit}
You can also chain methods to a cursor. This is an alternative to passing extra parameters to the "find" method. Here's what this looks like in the case of setting limits. I don't pass "limit" as a keyword argument to the find method. Rather, I chain the limit method, with an argument of three, to the cursor. And here's how to amend a cursor by chaining both skip and limit methods to it. Finally, I can even alter the sorting on a cursor by chaining a call to the sort method. Here, I sort by ascending year.

5. Simpler sorts of sort
One last thing. When sorting using the chained method, pymongo allows a couple of shortcuts. Here we specify sorting as before with a list of (field, direction) pairs. There is only one pair because we are sorting by only one field. In this case, we can destructure that single pair. Here I specify the sort with the field as the first argument and the direction as the second argument. Furthermore, pymongo will take the default direction to be ascending. Thus, we can sort by ascending year as a chained call with a single argument, "year". All these cursors yield the same sequence of documents. Finally, note that using the "find_one" method is different. It's like a call to "find" with the limit set to one and with automatic fetching from the cursor. Thus, in this case, you cannot use cursor methods - you need to pass skip and sort requirements as arguments.